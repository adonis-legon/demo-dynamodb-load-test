AWSTemplateFormatVersion: "2010-09-09"
Description: "DynamoDB Load Test - Infrastructure Template for AWS ECS Deployment"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod, aws]
    Description: Environment name for resource naming and configuration

  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for the VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  PublicSubnetCidr:
    Type: String
    Default: "10.0.1.0/24"
    Description: CIDR block for the public subnet
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  PrivateSubnetCidr:
    Type: String
    Default: "10.0.2.0/24"
    Description: CIDR block for the private subnet
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone for the subnets

  ECRRepositoryName:
    Type: String
    Default: "dynamodb-load-test"
    Description: Name of the ECR repository for container images

  LogRetentionDays:
    Type: Number
    Default: 7
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ]
    Description: CloudWatch Logs retention period in days

Resources:
  # VPC and Networking Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-vpc"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-igw"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-public-subnet"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest
        - Key: Type
          Value: Public

  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PrivateSubnetCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-private-subnet"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest
        - Key: Type
          Value: Private

  # NAT Gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-nat-eip"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-nat-gateway"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-public-rt"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-private-rt"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet
  # Security Groups
  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Environment}-dynamodb-load-test-ecs-sg"
      GroupDescription: Security group for ECS tasks running DynamoDB load tests
      VpcId: !Ref VPC
      SecurityGroupEgress:
        # Allow HTTPS outbound for AWS API calls
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound for AWS API calls
        # Allow HTTP outbound for package downloads
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP outbound for package downloads
        # Allow DNS resolution
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: DNS TCP resolution
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: DNS UDP resolution
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-ecs-sg"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest

  # VPC Endpoints for AWS Services (optional for cost optimization)
  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DescribeTable
            Resource: "*"

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: "*"

  # ECR Repository (using existing repository)
  # Note: ECR repository 'dynamodb-load-test' already exists, so we reference it by name

  # CloudWatch Log Groups
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/${Environment}-dynamodb-load-test"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-ecs-logs"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest

  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/application/${Environment}-dynamodb-load-test"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-dynamodb-load-test-app-logs"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DynamoDBLoadTest

Outputs:
  # VPC and Networking Outputs
  VpcId:
    Description: ID of the VPC
    Value: !Ref VPC

  PublicSubnetId:
    Description: ID of the public subnet
    Value: !Ref PublicSubnet

  PrivateSubnetId:
    Description: ID of the private subnet
    Value: !Ref PrivateSubnet

  ECSSecurityGroupId:
    Description: ID of the ECS task security group
    Value: !Ref ECSTaskSecurityGroup

  # ECR Repository Outputs (using existing repository)
  ECRRepositoryURI:
    Description: URI of the ECR repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}"

  ECRRepositoryArn:
    Description: ARN of the ECR repository
    Value: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepositoryName}"

  # IAM Role Outputs
  TaskExecutionRoleArn:
    Description: ARN of the ECS task execution role
    Value: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"

  # CloudWatch Log Groups Outputs
  LogGroupName:
    Description: Name of the Application CloudWatch Log Group
    Value: !Ref ApplicationLogGroup

  LogGroupArn:
    Description: ARN of the Application CloudWatch Log Group
    Value: !GetAtt ApplicationLogGroup.Arn

  ECSLogGroupName:
    Description: Name of the ECS CloudWatch Log Group
    Value: !Ref ECSLogGroup

  ECSLogGroupArn:
    Description: ARN of the ECS CloudWatch Log Group
    Value: !GetAtt ECSLogGroup.Arn

  # Network Configuration Outputs
  AvailabilityZone:
    Description: Availability Zone used for subnets
    Value: !Ref AvailabilityZone

  NatGatewayId:
    Description: ID of the NAT Gateway
    Value: !Ref NatGateway
